import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.async
import kotlinx.coroutines.launch
import org.jetbrains.exposed.sql.*
import org.jetbrains.exposed.sql.SchemaUtils.create
import org.jetbrains.exposed.sql.SchemaUtils.drop
import org.jetbrains.exposed.sql.transactions.TransactionManager
import org.jetbrains.exposed.sql.transactions.transaction
import org.sqlite.SQLiteDataSource

import java.io.BufferedReader
import java.io.File
import java.io.FileInputStream
import java.io.InputStreamReader
import java.sql.*
import java.util.stream.Collectors
import kotlin.system.exitProcess
import kotlin.system.measureTimeMillis

class NL_Cheats {
    object Cheats/*: BaseColumns()*/ {
        /*val id = integer("id").autoIncrement().primaryKey()
        val title = varchar("title", length = 50)
        val description = varchar("description", length = 1500)*/

        const val TABLE_NAME = "Cheats"
        const val COLUMN_NAME_ID = "Id"
        const val COLUMN_NAME_TITLE = "Title"
        const val COLUMN_NAME_DESCRIPTION = "Description"

        const val SQL_CREATE_CHEATS =
            "CREATE TABLE $TABLE_NAME (" +
                    "$COLUMN_NAME_ID INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "$COLUMN_NAME_TITLE TEXT," +
                    "$COLUMN_NAME_DESCRIPTION TEXT)"

        const val SQL_DELETE_CHEATS =
            "DROP TABLE IF EXISTS $TABLE_NAME"
    }

    fun dropAndCreateNewCheatsDatabase() {
        /*Database.connect("jdbc:sqlite:my.db", "org.sqlite.JDBC")
        TransactionManager.manager.defaultIsolationLevel = Connection.TRANSACTION_SERIALIZABLE
        transaction {
            drop(Cheats)
            create(Cheats)
        }*/



        /*val c: Connection?

        val stmt: Statement?

        try {
            Class.forName("org.sqlite.JDBC")

            c = DriverManager.getConnection("jdbc:sqlite:F:\MobileContent\J2ME_Cheats\")



            println("Database Opened...\n")

            stmt = c.createStatement()

            stmt.execute(Cheats.SQL_DELETE_CHEATS)

            stmt.executeUpdate(Cheats.SQL_CREATE_CHEATS)

            stmt.close()

            c.close()

        } catch (e: Exception) {

            System.err.println(e.javaClass.name + ": " + e.message)

            exitProcess(0)
        }
        println("Table Cheats dropped and re-created successfully")*/

        /*const */val TABLE_NAME = "Cheats"
        /*const */val COLUMN_NAME_ID = "Id"
        /*const */val COLUMN_NAME_TITLE = "Title"
        /*const */val COLUMN_NAME_DESCRIPTION = "Description"

        /*const */val SQL_CREATE_CHEATS =
            "CREATE TABLE $TABLE_NAME (" +
                    "$COLUMN_NAME_ID INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "$COLUMN_NAME_TITLE TEXT," +
                    "$COLUMN_NAME_DESCRIPTION TEXT)"

        /*const */val SQL_DELETE_CHEATS =
            "DROP TABLE IF EXISTS $TABLE_NAME"

        val basePath = "F:\\MobileContent\\J2ME_Cheats\\"
        val dbPath = "J2ME_Cheetah\\app\\src\\main\\assets\\databases\\Cheats.db"

        var conn: Connection? = null
        var stmt: Statement? = null
        try {
            Class.forName("org.sqlite.JDBC")
            conn = DriverManager.getConnection("jdbc:sqlite:$basePath$dbPath")

            println("Database was opened")

            stmt = conn.createStatement()

            stmt.execute(Cheats.SQL_DELETE_CHEATS)
            stmt.execute(Cheats.SQL_CREATE_CHEATS)

            /*stmt.close()
            conn.close()*/
        }
        catch (ex: ClassNotFoundException) {
            ex.printStackTrace()
        }
        catch (ex: SQLException) {
            ex.printStackTrace()
        }
        finally {
            try {
                stmt?.close()
                conn?.close()
                println("Table Cheats dropped and re-created successfully")
            }
            catch (e: SQLException) { e.printStackTrace() }
        }
    }

    fun callNewFunction() {
        val path = "F:\\MobileContent\\J2ME_Cheats\\Cheats_Application\\nl_cheats\\menu\\"

        dropAndCreateNewCheatsDatabase()
    }

    fun workingWithFAQs() {
        val listOfFAQs = readFileOfFAQs()
    }
    fun saveListOfCheats(path: String) {
        val pathToFolder = File(path)

        val listOfPairs = readFileAndFormListOfPairs(pathToFolder)
        val updatedListOfPairs = getUpdatedListOfPairsByDescriptionPath(listOfPairs)
        saveUpdatedDataIntoDatabase(updatedListOfPairs)
    }

    fun formListOfPairs(path: String): Job = GlobalScope.launch{
        dropAndCreateNewCheatsDatabase()

        val formFirstListOfPairs = async {
            saveListOfCheats(path + "c1.txt")
        }
        val formSecondListOfPairs = async {
            saveListOfCheats(path + "c2.txt")
        }
        val formThirdListOfPairs = async {
            saveListOfCheats(path + "c3.txt")
        }
        val formFourthListOfPairs = async {
            saveListOfCheats(path + "c4.txt")
        }
        val formFifthListOfPairs = async {
            saveListOfCheats(path + "c5.txt")
        }
        val formSixthListOfPairs = async {
            saveListOfCheats(path + "c6.txt")
        }
        val time = measureTimeMillis {
            formFirstListOfPairs.await()
            /*formSecondListOfPairs.await()
            formThirdListOfPairs.await()
            formFourthListOfPairs.await()
            formFifthListOfPairs.await()
            formSixthListOfPairs.await()*/
        }
        print("Затраченное время $time ms")
    }

    fun readFileOfFAQs(): List<String> {
        val filePath = "Cheats_Application\\nl_cheats\\txt\\tips\\3.txt"
        val locatedFile = File(filePath)

        val bufferedReader = BufferedReader(
            InputStreamReader(
                FileInputStream(locatedFile),"UTF8")
        )

        //print(listOfFAQs.size)
        return bufferedReader.readLines()
    }

    fun readFileAndFormListOfPairs(file: File)
            : ArrayList<Pair<String, String>> {
        val bufferedReader = BufferedReader(
            InputStreamReader(
                FileInputStream(file),"UTF8")
        )

        val list = bufferedReader.readLines() //as ArrayList<String>

        //print("Размер списка: ${list.size}\n")

        val listOfPairs = ArrayList<Pair<String, String>>()

        val listOfTitles = ArrayList<String>()
        val listOfDescriptionPaths = ArrayList<String>()

        for (i in 0 until list.size) {
            if (i % 2 == 0)
                listOfTitles.add(list[i])
            else listOfDescriptionPaths.add(list[i])
        }

        for (i in 0 until listOfTitles.size) {
            listOfPairs.add(
                Pair(listOfTitles[i],
                    listOfDescriptionPaths[i])
            )
        }
        return listOfPairs
    }
    fun getUpdatedListOfPairsByDescriptionPath(listOfPairs: ArrayList<Pair<String, String>>)
            : ArrayList<Pair<String, String>> {
        val updatedListOfPairs = ArrayList<Pair<String, String>>()

        val path = "F:\\MobileContent\\J2ME_Cheats\\Cheats_Application\\nl_cheats\\txt\\"

        listOfPairs.forEach {
            val completePath = path + it.second

            val bufferedReader = BufferedReader(
                InputStreamReader(
                    FileInputStream(completePath),"Cp1251")
            )

            val title = it.first
            val description = bufferedReader.lines().collect(Collectors.joining("\n"))

            updatedListOfPairs.add(Pair(title, description))
        }
        return updatedListOfPairs
    }

    fun saveUpdatedDataIntoDatabase(updatedListOfPairs: ArrayList<Pair<String, String>>) {
        /*Database.connect("jdbc:sqlite:my.db", "org.sqlite.JDBC")
        TransactionManager.manager.defaultIsolationLevel = Connection.TRANSACTION_SERIALIZABLE

        updatedListOfPairs.forEach {pair ->
            val cheatTitle = pair.first
            val cheatDescription = pair.second

            transaction {
                Cheats.insert {
                    it[title] = cheatTitle
                    it[description] = cheatDescription
                }
            }
        }

        transaction {
            for (cheat in Cheats.selectAll()) {
                println("${cheat[Cheats.id]}: ${cheat[Cheats.title]}: \n${cheat[Cheats.description]}")
            }
        }*/

        val c: Connection?

        val stmt: Statement?

        try {
            Class.forName("org.sqlite.JDBC")

            c = DriverManager.getConnection("jdbc:sqlite:C:\\CurrentProjects\\J2ME_Cheetah\\app\\src\\main\\assets\\databases\\NL_Cheats.db")

            //println("Database Opened...\n")

            stmt = c.createStatement()

            /*var query = ("INSERT INTO ${Cheats.TABLE_NAME}(${Cheats.COLUMN_NAME_TITLE}," +
                    "${Cheats.COLUMN_NAME_DESCRIPTION}) VALUES ('%s', '%s');")*/

            //var query = ("INSERT INTO cheats(title, description) VALUES ('%s','%s');")

            //var query = ("INSERT INTO cheats VALUES (null, '%s','%s')")

            //val qu = String.format(query, "1", "2")
            // val bu = String.format(query, "3", "4")

           // stmt.executeUpdate(query)

            val TABLE_NAME = "cheats_new"
            val COLUMN_NAME_ID = "id"
            val COLUMN_NAME_TITLE = "title"
            val COLUMN_NAME_DESCRIPTION = "description"

            updatedListOfPairs.forEach {pair ->
                val title = pair.first
                val description = pair.second

                val SQL_INSERT_CHEATS = "INSERT INTO $TABLE_NAME " +
                        "($COLUMN_NAME_TITLE, $COLUMN_NAME_DESCRIPTION) " +
                        "VALUES ('$title', '$description')"

                //query = String.format(query, title, description)


                /*val sql = "INSERT INTO cheats (id,title,description) " +
                        "VALUES ('" +null+ "'," +
                        title + "," + description + ")"*/


                stmt.execute(SQL_INSERT_CHEATS)
            }

            val rs: ResultSet = stmt.executeQuery("SELECT * FROM ${Cheats.TABLE_NAME}")
            while (rs.next()) {
                print(rs.getString(Cheats.COLUMN_NAME_TITLE))
                print(rs.getString(Cheats.COLUMN_NAME_DESCRIPTION))
                println("${rs.getInt(Cheats.COLUMN_NAME_ID)}: ${rs.getString(Cheats.COLUMN_NAME_TITLE)}: \n${rs.getString(Cheats.COLUMN_NAME_DESCRIPTION)}")
            }

            stmt.close()

            c.close()

        } catch (e: Exception) {

            System.err.println(e.javaClass.name + ": " + e.message)

            exitProcess(0)
        }
        println("Table Product Created Successfully!!!")
    }

    /*object Cheats: Table() {
        val id = integer("id").autoIncrement().primaryKey()
        val title = varchar("title", length = 50)
        val description = varchar("description", length = 1500)
    }*/
}